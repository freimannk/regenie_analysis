// Analysis parameters

params.step1_bgen = '/gpfs/space/home/a82371/ALSPAC/ALSPAC/genotype/ALSPAC_filtered_STEP1_genotyped_variants.bgen'
params.sample = '/gpfs/space/home/a82371/ALSPAC/ALSPAC/regenie_files/ALSPAC_filtered_STEP1_genotyped_variants_added_sex.sample'
params.step2_bgen = '/gpfs/space/home/a82371/ALSPAC/ALSPAC/genotype/ALSPAC_filtered_STEP2.bgen'

params.phenotype_file = '/gpfs/space/home/a82371/ALSPAC/ALSPAC/regenie_files/ALSPAC_bryois_probes_exprs_translated_QC_regenie.tsv'
//params.phenotype_list = 'ENSG00000070214,ENSG00000112149,ENSG00000166750'
params.included_phenotype_ids = '/gpfs/space/home/a82371/ALSPAC/ALSPAC/regenie_files/ALSPACT_genes.tsv'
params.covariate_file = '/gpfs/space/home/a82371/ALSPAC/ALSPAC/regenie_files/ALSPAC_covariates_added_sex.txt'
params.covariate_list = 'pheno_PC1,pheno_PC2,pheno_PC3,pheno_PC4,pheno_PC5,pheno_PC6,geno_PC1,geno_PC2,geno_PC3,geno_PC4,geno_PC5,geno_PC6,sex'
params.outdir = './'
params.prefix = 'ALSPAC'


process.executor = 'slurm'
process.queue = 'amd'

includeConfig 'conf/base.config'
report {

  enabled = true
  file = 'regenie_report.html'

}

trace {

  enabled = true
  file = 'regenie_trace.txt'

}


singularity {
  enabled = true
  autoMounts = true
  cacheDir = "$baseDir/singularity_img/"
}


def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
